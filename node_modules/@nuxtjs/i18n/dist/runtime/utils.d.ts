import { createLocaleFromRouteGetter } from 'vue-i18n-routing';
import type { Route, LocaleObject, RouteLocationNormalized, RouteLocationNormalizedLoaded, BaseUrlResolveHandler, PrefixableOptions, SwitchLocalePathIntercepter, I18nHeadOptions, SeoAttributesOptions } from 'vue-i18n-routing';
import type { I18n, I18nOptions, Locale, LocaleMessages, DefineLocaleMessage } from 'vue-i18n';
import type { NuxtApp } from '#app';
import type { NuxtI18nOptions, DetectBrowserLanguageOptions } from '#build/i18n.options.mjs';
import type { DeepRequired } from 'ts-essentials';
import type { DetectLocaleContext } from './internal';
import type { LocaleLoader as LocaleInternalLoader } from './messages';
import type { HeadSafe } from '@unhead/vue';
export declare function _setLocale(i18n: I18n, locale: Locale): any;
export declare function setCookieLocale(i18n: I18n, locale: Locale): any;
export declare function setLocaleMessage(i18n: I18n, locale: Locale, messages: Record<string, any>): any;
export declare function mergeLocaleMessage(i18n: I18n, locale: Locale, messages: Record<string, any>): any;
export declare function onLanguageSwitched(i18n: I18n, oldLocale: string, newLocale: string): void;
export declare function finalizePendingLocaleChange(i18n: I18n): Promise<any>;
export declare function loadAndSetLocale<Context extends NuxtApp = NuxtApp>(newLocale: string, localeMessages: Record<Locale, LocaleInternalLoader[]>, i18n: I18n, { useCookie, skipSettingLocaleOnNavigate, differentDomains, initial, cacheMessages, lazy }?: Pick<DetectBrowserLanguageOptions, 'useCookie'> & Pick<NuxtI18nOptions<Context>, 'lazy' | 'skipSettingLocaleOnNavigate' | 'differentDomains'> & {
    initial?: boolean;
    cacheMessages?: Map<string, LocaleMessages<DefineLocaleMessage>>;
}): Promise<[boolean, string]>;
type LocaleLoader = () => Locale;
export declare function detectLocale<Context extends NuxtApp = NuxtApp>(route: string | Route | RouteLocationNormalized | RouteLocationNormalizedLoaded, routeLocaleGetter: ReturnType<typeof createLocaleFromRouteGetter>, nuxtI18nOptions: DeepRequired<NuxtI18nOptions<Context>>, vueI18nOptions: I18nOptions, initialLocaleLoader: Locale | LocaleLoader, detectLocaleContext: DetectLocaleContext, normalizedLocales: LocaleObject[], localeCodes?: string[]): string;
export declare function detectRedirect<Context extends NuxtApp = NuxtApp>({ route, targetLocale, routeLocaleGetter, nuxtI18nOptions, calledWithRouting }: {
    route: {
        to: Route | RouteLocationNormalized | RouteLocationNormalizedLoaded;
        from?: Route | RouteLocationNormalized | RouteLocationNormalizedLoaded;
    };
    targetLocale: Locale;
    routeLocaleGetter: ReturnType<typeof createLocaleFromRouteGetter>;
    nuxtI18nOptions: DeepRequired<NuxtI18nOptions<Context>>;
    calledWithRouting?: boolean;
}): string;
type NavigateArgs = {
    i18n: I18n;
    redirectPath: string;
    locale: string;
    route: Route | RouteLocationNormalized | RouteLocationNormalizedLoaded;
};
export declare function navigate<Context extends NuxtApp = NuxtApp>(args: NavigateArgs, { status, rootRedirect, differentDomains, skipSettingLocaleOnNavigate, enableNavigate }?: {
    status?: number;
    enableNavigate?: boolean;
} & Pick<NuxtI18nOptions<Context>, 'skipSettingLocaleOnNavigate' | 'differentDomains' | 'rootRedirect'>): Promise<any>;
export declare function injectNuxtHelpers(nuxt: NuxtApp, i18n: I18n): void;
export declare function extendPrefixable(differentDomains: boolean): (opts: PrefixableOptions) => boolean;
export declare function extendSwitchLocalePathIntercepter(differentDomains: boolean, normalizedLocales: LocaleObject[]): SwitchLocalePathIntercepter;
export declare function extendBaseUrl<Context = NuxtApp>(baseUrl: string | BaseUrlResolveHandler<NuxtApp>, options: Pick<Required<NuxtI18nOptions<NuxtApp>>, 'differentDomains'> & {
    localeCodeLoader: Locale | LocaleLoader;
    normalizedLocales: LocaleObject[];
}): BaseUrlResolveHandler<Context>;
export type HeadParam = Required<Pick<HeadSafe, 'meta' | 'link'>>;
type IdParam = NonNullable<I18nHeadOptions['identifierAttribute']>;
export declare function addHreflangLinks(locales: LocaleObject[], head: HeadParam, idAttribute: IdParam): void;
export declare function addCanonicalLinksAndOgUrl(head: HeadParam, idAttribute: IdParam, seoAttributesOptions?: SeoAttributesOptions): void;
export declare function addCurrentOgLocale(currentLocale: LocaleObject, currentIso: string | undefined, head: HeadParam, idAttribute: IdParam): void;
export declare function addAlternateOgLocales(locales: LocaleObject[], currentIso: string | undefined, head: HeadParam, idAttribute: IdParam): void;
export declare function getNormalizedLocales(locales: string[] | LocaleObject[]): LocaleObject[];
export {};
